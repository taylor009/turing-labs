generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String         @id @default(dbgenerated("(gen_random_uuid())::text"))
  email          String         @unique
  name           String
  password       String
  role           user_role      @default(STAKEHOLDER)
  created_at     DateTime       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime       @default(now()) @db.Timestamptz(6)
  approvals      Approval[]
  proposals      Proposal[]
  refresh_tokens RefreshToken[]
  stakeholders   Stakeholder[]

  @@map("users")
}

model Proposal {
  id                     String          @id @default(dbgenerated("(gen_random_uuid())::text"))
  product_name           String
  current_cost           Float
  category               String
  formulation            String
  status                 proposal_status @default(DRAFT)
  created_at             DateTime        @default(now()) @db.Timestamptz(6)
  updated_at             DateTime        @default(now()) @db.Timestamptz(6)
  created_by             String
  business_objectives    Json
  priority_objectives    Json
  constraints            Json
  acceptable_changes     Json
  not_acceptable_changes Json
  feasibility_limits     Json
  approvals              Approval[]
  users                  User            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stakeholders           Stakeholder[]

  @@index([created_by], map: "idx_proposals_created_by")
  @@index([status], map: "idx_proposals_status")
  @@map("proposals")
}

model Stakeholder {
  id           String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  proposal_id  String
  user_id      String
  status       stakeholder_status @default(PENDING)
  invited_at   DateTime           @default(now()) @db.Timestamptz(6)
  responded_at DateTime?          @db.Timestamptz(6)
  comments     String?
  proposals    Proposal           @relation(fields: [proposal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        User               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([proposal_id, user_id])
  @@index([proposal_id], map: "idx_stakeholders_proposal_id")
  @@index([user_id], map: "idx_stakeholders_user_id")
  @@map("stakeholders")
}

model Approval {
  id          String          @id @default(dbgenerated("(gen_random_uuid())::text"))
  proposal_id String
  user_id     String
  status      approval_status
  comments    String?
  created_at  DateTime        @default(now()) @db.Timestamptz(6)
  updated_at  DateTime        @default(now()) @db.Timestamptz(6)
  proposals   Proposal        @relation(fields: [proposal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([proposal_id, user_id])
  @@index([proposal_id], map: "idx_approvals_proposal_id")
  @@index([user_id], map: "idx_approvals_user_id")
  @@map("approvals")
}

model RefreshToken {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  token      String   @unique
  user_id    String
  expires_at DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_refresh_tokens_token")
  @@index([user_id], map: "idx_refresh_tokens_user_id")
  @@map("refresh_tokens")
}

enum approval_status {
  PENDING
  APPROVED
  CHANGES_REQUESTED
  REJECTED
}

enum proposal_status {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum stakeholder_status {
  PENDING
  ACCEPTED
  DECLINED
}

enum user_role {
  ADMIN
  PRODUCT_MANAGER
  STAKEHOLDER
}
